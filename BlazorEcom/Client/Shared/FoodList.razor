@inject IFoodService FoodService
@if(FoodService.Foods == null || FoodService.Foods.Count == 0)
{
    <span>Loading Foods...</span>
    <span><img style="width:30px; height:30px;"  src="~/processing.gif" alt="Processing..."/></span>
}
else{
<div class="accordion-body">
    <h3>@Title</h3>
    <ul class="list-unstyled">
        @foreach (var food in FoodService.Foods)
        {            
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/food/@food.FoodId">
                        <img class="media-img" src="@food.ImageUrl" alt="@food.Name">
                    </a>
                </div>    
                <div class="media-body">
                    <a href="/food/@food.FoodId">
                        <h4 class="mb-0">@food.Name </h4>
                    </a>
                    <h5 class="price"><strong>Price: </strong> #@food.Price.ToString("000.00")</h5>
                    <p> <strong>DESCRIPTION: </strong> @food.Description</p>
                  <ul><shadow><strong>INGREDIENTS: </strong></shadow> 
                  @foreach (var ingredient in food.Ingredients)
                    {
                        <li>@ingredient.Name</li>
                    }                 
                   </ul>
                </div>
            </li>
            <li >
              <div class="alert alert-info">
                    <h6><strong>How To Prapare @food.Name </strong></h6>
                    <p>@food.Instruction</p>
                </div>
            </li>

        }
    </ul>
</div>
}

@code {
    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public string Title { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await FoodService.GetFoods();
    }
 }
